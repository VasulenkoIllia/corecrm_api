generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  name              String
  roleId            Int?
  role              Role?          @relation(fields: [roleId], references: [id])
  isEmailConfirmed  Boolean        @default(false)
  confirmationToken String?        @unique
  resetToken        String?        @unique
  resetTokenExpires DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  companyUsers      CompanyUsers[] @relation("UserCompanyRelation")
  invitations       Invitations[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id                 Int              @id @default(autoincrement())
  name               String
  status             String           @default("active")
  subscriptionStatus String           @default("active")
  modules            CompanyModules[] // Новий зв’язок із модулями
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  users              CompanyUsers[]
  roles              CompanyRole[]
  invitations        Invitations[]
  clients            Client[]
  cars               Car[]
}

model CompanyUsers {
  id           Int                @id @default(autoincrement())
  userId       Int
  companyId    Int
  user         User               @relation("UserCompanyRelation", fields: [userId], references: [id])
  company      Company            @relation(fields: [companyId], references: [id])
  companyRoles UserCompanyRoles[] @relation("UserCompanyRolesRelation")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([userId, companyId])
}

model UserCompanyRoles {
  id            Int          @id @default(autoincrement())
  userCompanyId Int
  companyRoleId Int
  userCompany   CompanyUsers @relation("UserCompanyRolesRelation", fields: [userCompanyId], references: [id])
  companyRole   CompanyRole  @relation(fields: [companyRoleId], references: [id])
  assignedAt    DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([userCompanyId, companyRoleId])
}

model CompanyRole {
  id          Int                      @id @default(autoincrement())
  companyId   Int
  name        String
  description String?
  company     Company                  @relation(fields: [companyId], references: [id])
  users       UserCompanyRoles[]
  permissions CompanyRolePermissions[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt

  @@unique([companyId, name])
}

model Module {
  id          Int                      @id @default(autoincrement())
  name        String                   @unique
  description String?
  companies   CompanyModules[]
  permissions CompanyRolePermissions[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
}

model CompanyModules {
  id        Int      @id @default(autoincrement())
  companyId Int
  moduleId  Int
  company   Company  @relation(fields: [companyId], references: [id])
  module    Module   @relation(fields: [moduleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, moduleId])
}

model CompanyRolePermissions {
  id        Int         @id @default(autoincrement())
  roleId    Int
  moduleId  Int
  read      Boolean     @default(false)
  create    Boolean     @default(false)
  update    Boolean     @default(false)
  delete    Boolean     @default(false)
  role      CompanyRole @relation(fields: [roleId], references: [id])
  module    Module      @relation(fields: [moduleId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([roleId, moduleId])
}

model Invitations {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  companyId Int
  creatorId Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id])
  creator   User     @relation(fields: [creatorId], references: [id])
}

model Client {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String?  @unique
  email     String?  @unique
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  cars      Car[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Car {
  id           Int      @id @default(autoincrement())
  clientId     Int
  client       Client   @relation(fields: [clientId], references: [id])
  companyId    Int
  company      Company  @relation(fields: [companyId], references: [id])
  vin          String   @unique
  make         String
  model        String
  year         Int
  color        String?
  licensePlate String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
